{"ast":null,"code":"var _jsxFileName = \"/Users/vanessamartin/Desktop/coding_prac/react_prac/lotusarts/client/src/components/stripe-button/stripe-button.component.jsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport * as emailjs from \"emailjs-com\";\n\nconst StripeCheckoutButton = ({\n  price,\n  order\n}) => {\n  const priceForStripe = price * 100; // change before going live\n\n  const publishableKey = \"pk_test_TD3bJFY6vKMBXowUkCZphnfe\";\n\n  const onToken = token => {\n    console.log(\"TOKEN: \", token);\n    axios({\n      url: \"payment\",\n      method: \"post\",\n      data: {\n        amount: priceForStripe,\n        token: token\n      }\n    }).then(response => {\n      alert(\"Sucessful payment\");\n      console.log(\"RESPONSE.DATA.SUCCESS: \", response.data.success);\n      const _response$data$succes = response.data.success,\n            receipt_email = _response$data$succes.receipt_email,\n            receipt_url = _response$data$succes.receipt_url;\n      const _response$data$succes2 = response.data.success.billing_details,\n            name = _response$data$succes2.name,\n            address = _response$data$succes2.address;\n      emailSubmit({\n        receipt_email,\n        receipt_url,\n        name,\n        address\n      });\n    }).catch(error => {\n      console.log(\"Payment Error: \", error);\n      alert(\"There was an issue with your payment! Please make sure you use the provided credit card.\");\n    });\n  };\n\n  const emailSubmit = emailData => {\n    const receipt_email = emailData.receipt_email,\n          receipt_url = emailData.receipt_url,\n          name = emailData.name,\n          address = emailData.address;\n    const stringAddress = `${address.line1} ${address.line2 ? address.line2 : \"\"} ${address.city}, ${address.state}, ${address.country} ${address.postal_code}`;\n    const addressFix = JSON.stringify(stringAddress);\n    const stringOrder = order.map(order => `Title: ${order.title} Quantity: ${order.quantity} Price: $${order.price} Size: ${order.size} Desc: ${order.desc}`);\n    const orderFix = JSON.stringify(stringOrder);\n    console.log(\"ORDER: \", order);\n    const messageUpdated = `${name} bought a product! ` + ` Address -  ${addressFix} ` + ` Order - ${orderFix} ` + ` Receipt - ${receipt_url}`;\n    const templateParams = {\n      from_name: receipt_email,\n      to_name: \"l0tusart007@gmail.com\",\n      subject: \"PRODUCT PURCHASED - Lotus Art\",\n      message_html: messageUpdated\n    };\n    emailjs.send(\"gmail\", \"template_mgKZRCOz\", templateParams, \"user_ZGzQ6szqqXtsDwYcf6Edg\").then(response => {\n      alert(\"Artist has been informed of your purchase\");\n    }).catch(error => {\n      console.log(\"Message Error: \", error);\n      alert(\"There was an issue with your order! Please try again.\");\n    });\n  };\n\n  return React.createElement(StripeCheckout, {\n    name: \"Lotus Art\",\n    label: \"Pay Now\",\n    currency: \"USD\",\n    image: \"https://svgshare.com/i/CUz.svg\",\n    panelLabel: \"Pay Now\",\n    amount: priceForStripe,\n    description: `Your total is $${price}`,\n    shippingAddress: true,\n    billingAddress: true,\n    zipCode: true,\n    allowRememberMe: true,\n    token: onToken,\n    stripeKey: publishableKey,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  });\n};\n\nexport default StripeCheckoutButton;","map":{"version":3,"sources":["/Users/vanessamartin/Desktop/coding_prac/react_prac/lotusarts/client/src/components/stripe-button/stripe-button.component.jsx"],"names":["React","axios","StripeCheckout","emailjs","StripeCheckoutButton","price","order","priceForStripe","publishableKey","onToken","token","console","log","url","method","data","amount","then","response","alert","success","receipt_email","receipt_url","billing_details","name","address","emailSubmit","catch","error","emailData","stringAddress","line1","line2","city","state","country","postal_code","addressFix","JSON","stringify","stringOrder","map","title","quantity","size","desc","orderFix","messageUpdated","templateParams","from_name","to_name","subject","message_html","send"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport * as emailjs from \"emailjs-com\";\n\nconst StripeCheckoutButton = ({ price, order }) => {\n  const priceForStripe = price * 100;\n  // change before going live\n  const publishableKey = \"pk_test_TD3bJFY6vKMBXowUkCZphnfe\";\n\n  const onToken = token => {\n    console.log(\"TOKEN: \", token);\n    axios({\n      url: \"payment\",\n      method: \"post\",\n      data: {\n        amount: priceForStripe,\n        token: token\n      }\n    })\n      .then(response => {\n        alert(\"Sucessful payment\");\n        console.log(\"RESPONSE.DATA.SUCCESS: \", response.data.success);\n        const { receipt_email, receipt_url } = response.data.success;\n        const { name, address } = response.data.success.billing_details;\n        emailSubmit({ receipt_email, receipt_url, name, address });\n      })\n      .catch(error => {\n        console.log(\"Payment Error: \", error);\n        alert(\n          \"There was an issue with your payment! Please make sure you use the provided credit card.\"\n        );\n      });\n  };\n\n  const emailSubmit = emailData => {\n    const { receipt_email, receipt_url, name, address } = emailData;\n\n    const stringAddress = `${address.line1} ${\n      address.line2 ? address.line2 : \"\"\n    } ${address.city}, ${address.state}, ${address.country} ${\n      address.postal_code\n    }`;\n    const addressFix = JSON.stringify(stringAddress);\n\n    \n    const stringOrder =  order.map(order => `Title: ${order.title} Quantity: ${order.quantity} Price: $${order.price} Size: ${order.size} Desc: ${order.desc}`)\n\n    const orderFix = JSON.stringify(stringOrder);\n    console.log(\"ORDER: \", order);\n\n    const messageUpdated = \n    `${name} bought a product! ` +\n    ` Address -  ${addressFix} ` +\n    ` Order - ${orderFix} ` +\n    ` Receipt - ${receipt_url}`;\n    \n\n    const templateParams = {\n      from_name: receipt_email,\n      to_name: \"l0tusart007@gmail.com\",\n      subject: \"PRODUCT PURCHASED - Lotus Art\",\n      message_html: messageUpdated\n    };\n\n    emailjs\n      .send(\n        \"gmail\",\n        \"template_mgKZRCOz\",\n        templateParams,\n        \"user_ZGzQ6szqqXtsDwYcf6Edg\"\n      )\n      .then(response => {\n        alert(\"Artist has been informed of your purchase\");\n      })\n      .catch(error => {\n        console.log(\"Message Error: \", error);\n        alert(\"There was an issue with your order! Please try again.\");\n      });\n  };\n\n  return (\n    <StripeCheckout\n      name=\"Lotus Art\"\n      label=\"Pay Now\"\n      currency=\"USD\"\n      image=\"https://svgshare.com/i/CUz.svg\"\n      panelLabel=\"Pay Now\"\n      amount={priceForStripe}\n      description={`Your total is $${price}`}\n      shippingAddress\n      billingAddress\n      zipCode\n      allowRememberMe\n      token={onToken}\n      stripeKey={publishableKey}\n    />\n  );\n};\n\nexport default StripeCheckoutButton;\n"]},"metadata":{},"sourceType":"module"}